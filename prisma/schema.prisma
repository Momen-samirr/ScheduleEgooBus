// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  clerkId  String  @unique
  name     String?
  bio      String?
  image    String?
  location String?
  website  String?
  phone    String? @unique
  workIn   String?
  role     Role    @default(user)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt

  // Relations:
  posts Post[] 
  comments Comment[] 
  likes Like[] 

  followers Follows[] @relation("following") 
  following Follows[] @relation("follower") 

  notifications Notification[] @relation("userNotifications") 
  notificationsCreated Notification[] @relation("notificationCreator") 

  trips Tripindividual[]

  // One-to-One with Route
  route Route?
}

model Route {
  id     String @id @default(uuid()) 
  name   String
  status HunkelTripEnum @default(available)
  trips  HunkelTrip[]

  // One-to-One with User (Only defining @relation here)
  driver   User? @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId String? @unique
}

model HunkelTrip {
  id        String @id @default(uuid()) 
  date      DateTime
  status    hunkelStatus @default(notdone)
  routeId   String
  route     Route @relation(fields: [routeId], references: [id], onDelete: Cascade)

  // Outbound & ReturnTrip (Only defining @relation here)
  outbound  Outbound?
  returnTrip ReturnTrip?
}

model Outbound {
  id        String @id @default(uuid()) 
  tripId    String @unique
  trip      HunkelTrip @relation(fields: [tripId], references: [id], onDelete: Cascade) // Only define @relation here
  startTime String
  endTime   String
}

model ReturnTrip {
  id        String @id @default(uuid()) 
  tripId    String @unique
  trip      HunkelTrip @relation(fields: [tripId], references: [id], onDelete: Cascade) // Only define @relation here
  startTime String
  endTime   String
}



enum TripType {
  SCHEDULED
  SOLO
}

enum HunkelTripEnum {
  available
  reserved
}

enum hunkelStatus {
  done
  notdone
}

model Post {
  id               String    @id @default(cuid())
  authorId         String
  tableCode        String
  tripsNum         Int?      // Nullable for solo trips
  trips            String
  haiisPrice       String?   // Nullable for solo trips
  bigcarPrice      String?   // Nullable for solo trips
  kelometr         Int?
  gapmetr          String?   // Nullable for solo trips
  prices           String?   // Nullable for solo trips
  currentCapacity  Int?
  tripType         TripType  // Enum: SCHEDULED or SOLO
  tripMode         TripMode   @default(ramdan)
  createdAt        DateTime  @default(now())

  // Relations
  author          User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments        Comment[]
  likes          Like[]
  notifications   Notification[]
}

model Tripindividual {
  id          String    @id   @default(cuid())
  driverId    String?
  route       String
  time        String
  date        DateTime
  status      HunkelStatus    @default(available)
  reservedTripStatus TripIndividualStatus   @default(notDone)
  createdAt   DateTime    @default(now())

  driver      User? @relation(fields: [driverId], references: [id], onDelete: Cascade)
}

enum TripIndividualStatus {
  done
  notDone
}

model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  tripId String?
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // composite index for faster queries
}

model Like {
  id        String   @id @default(cuid())
  postId    String                 
  tripId    String?
  userId    String                 
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // this prevents same user liking post twice
  @@index([userId,tripId]) // composite index for faster queries
  @@unique([userId,tripId]) // this prevents same user liking post twice
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // composite index for faster queries
  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?
  tripId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@index([userId, createdAt])
}

model Banner {
  id              String @id @default(uuid())
  title           String
  imageString     String
  isHero          Boolean @default(false)
  createdAt       DateTime @default(now())
}


enum Role {
  admin
  driver
  user
  employee
}

enum HunkelStatus {
  available
  reserved
}

enum TripMode {
  ramdan
  normal
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}
